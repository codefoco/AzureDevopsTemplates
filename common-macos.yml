  steps:

  - script: |
            echo '========== Environment Variables =========='
            printenv
            echo '========== Pipeline Variables =========='
            echo 'Agent.BuildDirectory=$(Agent.BuildDirectory)'
            echo 'Agent.HomeDirectory=$(Agent.HomeDirectory)'
            echo 'Agent.Id=$(Agent.Id)'
            echo 'Agent.JobName=$(Agent.JobName)'
            echo 'Agent.JobStatus=$(Agent.JobStatus)'
            echo 'Agent.MachineName=$(Agent.MachineName)'
            echo 'Agent.Name=$(Agent.Name)'
            echo 'Agent.OS=$(Agent.OS)'
            echo 'Agent.OSArchitecture=$(Agent.OSArchitecture)'
            echo 'Agent.TempDirectory=$(Agent.TempDirectory)'
            echo 'Agent.ToolsDirectory=$(Agent.ToolsDirectory)'
            echo 'Agent.WorkFolder=$(Agent.WorkFolder)'
            echo 'Build.ArtifactStagingDirectory=$(Build.ArtifactStagingDirectory)'
            echo 'Build.BuildId=$(Build.BuildId)'
            echo 'Build.BuildNumber=$(Build.BuildNumber)'
            echo 'Build.BuildUri=$(Build.BuildUri)'
            echo 'Build.BinariesDirectory=$(Build.BinariesDirectory)'
            echo 'Build.ContainerId=$(Build.ContainerId)'
            echo 'Build.DefinitionName=$(Build.DefinitionName)'
            echo 'Build.DefinitionVersion=$(Build.DefinitionVersion)'
            echo 'Build.QueuedBy=$(Build.QueuedBy)'
            echo 'Build.QueuedById=$(Build.QueuedById)'
            echo 'Build.Reason=$(Build.Reason)'
            echo 'Build.Repository.Clean=$(Build.Repository.Clean)'
            echo 'Build.Repository.LocalPath=$(Build.Repository.LocalPath)'
            echo 'Build.Repository.ID=$(Build.Repository.ID)'
            echo 'Build.Repository.Name=$(Build.Repository.Name)'
            echo 'Build.Repository.Provider=$(Build.Repository.Provider)'
            echo 'Build.Repository.Tfvc.Workspace=$(Build.Repository.Tfvc.Workspace)'
            echo 'Build.Repository.Uri=$(Build.Repository.Uri)'
            echo 'Build.RequestedFor=$(Build.RequestedFor)'
            echo 'Build.RequestedForEmail=$(Build.RequestedForEmail)'
            echo 'Build.RequestedForId=$(Build.RequestedForId)'
            echo 'Build.SourceBranch=$(Build.SourceBranch)'
            echo 'Build.SourceBranchName=$(Build.SourceBranchName)'
            echo 'Build.SourcesDirectory=$(Build.SourcesDirectory)'
            echo 'Build.SourceVersion=$(Build.SourceVersion)'
            echo 'Build.SourceVersionMessage=$(Build.SourceVersionMessage)'
            echo 'Build.StagingDirectory=$(Build.StagingDirectory)'
            echo 'Build.Repository.Git.SubmoduleCheckout=$(Build.Repository.Git.SubmoduleCheckout)'
            echo 'Build.SourceTfvcShelveset=$(Build.SourceTfvcShelveset)'
            echo 'Build.TriggeredBy.BuildId=$(Build.TriggeredBy.BuildId)'
            echo 'Build.TriggeredBy.DefinitionId=$(Build.TriggeredBy.DefinitionId)'
            echo 'Build.TriggeredBy.DefinitionName=$(Build.TriggeredBy.DefinitionName)'
            echo 'Build.TriggeredBy.BuildNumber=$(Build.TriggeredBy.BuildNumber)'
            echo 'Build.TriggeredBy.ProjectID=$(Build.TriggeredBy.ProjectID)'
            echo 'Common.TestResultsDirectory=$(Common.TestResultsDirectory)'
            echo 'Pipeline.Workspace=$(Pipeline.Workspace)'
            echo 'Environment.Name=$(Environment.Name)'
            echo 'Environment.Id=$(Environment.Id)'
            echo 'Environment.ResourceName=$(Environment.ResourceName)'
            echo 'Environment.ResourceId=$(Environment.ResourceId)'
            echo 'System.AccessToken=$(System.AccessToken)'
            echo 'System.CollectionId=$(System.CollectionId)'
            echo 'System.CollectionUri=$(System.CollectionUri)'
            echo 'System.DefaultWorkingDirectory=$(System.DefaultWorkingDirectory)'
            echo 'System.DefinitionId=$(System.DefinitionId)'
            echo 'System.HostType=$(System.HostType)'
            echo 'System.JobAttempt=$(System.JobAttempt)'
            echo 'System.JobDisplayName=$(System.JobDisplayName)'
            echo 'System.JobId=$(System.JobId)'
            echo 'System.JobName=$(System.JobName)'
            echo 'System.PhaseAttempt=$(System.PhaseAttempt)'
            echo 'System.PhaseDisplayName=$(System.PhaseDisplayName)'
            echo 'System.PhaseName=$(System.PhaseName)'
            echo 'System.StageAttempt=$(System.StageAttempt)'
            echo 'System.StageDisplayName=$(System.StageDisplayName)'
            echo 'System.StageName=$(System.StageName)'
            echo 'System.PullRequest.IsFork=$(System.PullRequest.IsFork)'
            echo 'System.PullRequest.PullRequestId=$(System.PullRequest.PullRequestId)'
            echo 'System.PullRequest.PullRequestNumber=$(System.PullRequest.PullRequestNumber)'
            echo 'System.PullRequest.SourceBranch=$(System.PullRequest.SourceBranch)'
            echo 'System.PullRequest.SourceRepositoryURI=$(System.PullRequest.SourceRepositoryURI)'
            echo 'System.PullRequest.TargetBranch=$(System.PullRequest.TargetBranch)'
            echo 'System.TeamFoundationCollectionUri=$(System.TeamFoundationCollectionUri)'
            echo 'System.TeamProject=$(System.TeamProject)'
            echo 'System.TeamProjectId=$(System.TeamProjectId)'
            echo 'TF_BUILD=$(TF_BUILD)'
            echo '========== Tool Version =========='
            /usr/bin/openssl --version 
  
    displayName: 'Show Build Info' 

  - script: '/Users/runner/Library/Android/sdk/cmdline-tools/latest/bin/sdkmanager "build-tools;32.0.0"'
    displayName: 'Install Android Build Tools 32.0.0'

  - script: '/Users/runner/Library/Android/sdk/cmdline-tools/latest/bin/sdkmanager "platforms;android-33"'
    displayName: 'Install Android platforms 33' 
    
  - script: '/Users/runner/Library/Android/sdk/cmdline-tools/latest/bin/sdkmanager "platforms;android-34"'
    displayName: 'Install Android platforms 34'

  - script: '/Users/runner/Library/Android/sdk/cmdline-tools/latest/bin/sdkmanager "platforms;android-35"'
    displayName: 'Install Android platforms 35'
    
  - script: '/usr/bin/xcodebuild -version'
    displayName: 'Show Xcode Version' 
    
  - script: 'xcode-select -p'
    displayName: 'Show current xcode-select path'

  - script: 'ls -l /Applications/'
    displayName: 'ls -l /Applications/'
    
  - script: 'sudo rm /Applications/Xcode.app'
    displayName: 'Remove Xcode.app symlink due Xamarin.Mac/iOS bug'
    
#   - script: 'sudo mv /Applications/Xcode_12.app /Applications/Old_Xcode_12.app'
#     displayName: 'Rename Xcode_12.app to avoid someone using the old Xcode'
    
    ## Update this section to newer versions of Xcode (e.g 14.3)
    ## Check Xcode path on ADO here: https://github.com/actions/virtual-environments/blob/main/images/macos/macos-12-Readme.md
    
  - script: 'sudo mv /Applications/Xcode_16.3.app /Applications/Xcode.app'
    displayName: 'Move Xcode_16.3.app to /Applications/Xcode.app'
    
  - script: 'sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer'
    displayName: 'Ensure xcode-select point to /Applications/Xcode.app'

  # - script: 'xcode-select --install'
  #   displayName: 'Ensure command line tools is installed'
    
  - script: '/usr/bin/xcodebuild -version'
    displayName: 'Show Xcode Version'
    
  - script: 'xcode-select -p'
    displayName: 'Show current xcode-select path'

  - script: 'sudo xcodebuild -license accept'
    displayName: 'Xcode License accepted'
    continueOnError: true

  - script: 'sudo xcodebuild -runFirstLaunch'
    displayName: 'Xcode run first launch'
    continueOnError: true

  - script: 'xcodebuild -downloadPlatform iOS'
    displayName: 'Xcode Download iOS platforms'

  - script: 'xcodebuild -downloadPlatform tvOS'
    displayName: 'Xcode Download tvOS platforms'

  # - script: 'xcodebuild -downloadPlatform iOS -exportPath ~/Downloads/ -buildVersion 22B81'
  #   displayName: 'Download iOS 18.1 platform'
  #   continueOnError: true

  # - script: 'xcrun simctl runtime add ~/Downloads/iphonesimulator_18.1_22B81.dmg'
  #   displayName: 'Install iOS 18.1 runtime'
  #   continueOnError: true

  # - script: 'xcodebuild -downloadPlatform tvOS -exportPath ~/Downloads/ -buildVersion 22J578'
  #   displayName: 'Download tvOS 18.1 platform'
  #   continueOnError: true

  # - script: 'xcrun simctl runtime add ~/Downloads/appletvsimulator_18.1_22J578.dmg'
  #   displayName: 'Install tvOS 18.1 runtime'
  #   continueOnError: true
    
  - task: InstallAppleCertificate@2
    continueOnError: true
    inputs:
      certSecureFile: 'DeveloperIDApplication.p12'
      certPwd: '$(CertificatePwd)'
      keychain: 'temp'
      
  - task: InstallAppleCertificate@2
    continueOnError: true
    inputs:
      certSecureFile: 'DeveloperIDInstaller.p12'
      certPwd: '$(CertificatePwd)'
      keychain: 'temp'
      
  - task: InstallAppleCertificate@2
    continueOnError: true
    inputs:
      certSecureFile: 'Development.p12'
      certPwd: '$(CertificatePwd)'
      keychain: 'temp'
      
  - task: InstallAppleCertificate@2
    continueOnError: true
    inputs:
      certSecureFile: 'MacInstallerDistribution.p12'
      certPwd: '$(CertificatePwd)'
      keychain: 'temp'

  - task: InstallAppleCertificate@2
    continueOnError: true
    inputs:
      certSecureFile: 'Distribution.p12'
      certPwd: '$(CertificatePwd)'
      keychain: 'temp'

  # - task: InstallAppleCertificate@2
  #   continueOnError: true
  #   inputs:
  #     certSecureFile: 'DeveloperIDApplication.p12'
  #     certPwd: '$(CertificatePwd)'
  #     keychain: 'temp'
  #     opensslPkcsArgs: -legacy
      
  # - task: InstallAppleCertificate@2
  #   continueOnError: true
  #   inputs:
  #     certSecureFile: 'DeveloperIDInstaller.p12'
  #     certPwd: '$(CertificatePwd)'
  #     keychain: 'temp'
  #     opensslPkcsArgs: -legacy
      
  # - task: InstallAppleCertificate@2
  #   continueOnError: true
  #   inputs:
  #     certSecureFile: 'Development.p12'
  #     certPwd: '$(CertificatePwd)'
  #     keychain: 'temp'
  #     opensslPkcsArgs: -legacy
      
  # - task: InstallAppleCertificate@2
  #   continueOnError: true
  #   inputs:
  #     certSecureFile: 'MacInstallerDistribution.p12'
  #     certPwd: '$(CertificatePwd)'
  #     keychain: 'temp'
  #     opensslPkcsArgs: -legacy

  # - task: InstallAppleCertificate@2
  #   continueOnError: true
  #   inputs:
  #     certSecureFile: 'Distribution.p12'
  #     certPwd: '$(CertificatePwd)'
  #     keychain: 'temp'
  #     opensslPkcsArgs: -legacy
      
  - task: InstallAppleProvisioningProfile@1
    inputs:
      provisioningProfileLocation: 'secureFiles'
      provProfileSecureFile: 'AppStore_Distribuition.mobileprovision'

  - task: InstallAppleProvisioningProfile@1
    inputs:
      provisioningProfileLocation: 'secureFiles'
      provProfileSecureFile: 'iOS_Development.mobileprovision'

  - task: InstallAppleProvisioningProfile@1
    inputs:
      provisioningProfileLocation: 'secureFiles'
      provProfileSecureFile: 'macOS_AppStore_Distribution.provisionprofile'

  - task: InstallAppleProvisioningProfile@1
    inputs:
      provisioningProfileLocation: 'secureFiles'
      provProfileSecureFile: 'macOS_Development.provisionprofile'
      
  - task: InstallAppleProvisioningProfile@1
    inputs:
      provisioningProfileLocation: 'secureFiles'
      provProfileSecureFile: 'tvOS_Development.mobileprovision'

  - task: InstallAppleProvisioningProfile@1
    inputs:
      provisioningProfileLocation: 'secureFiles'
      provProfileSecureFile: 'tvOS_AppStore_Distribution.mobileprovision'
      
  - task: JavaToolInstaller@0
    displayName: install JDK 11
    inputs:
      versionSpec: '11'
      jdkArchitectureOption: 'x64'
      jdkSourceOption: 'PreInstalled'
      
  # Install Mono
  - task: CmdLine@2
    displayName: 'Provisioning Mono SDK'
    inputs:
      script: 'cd ~;
              curl -OL https://download.mono-project.com/archive/6.12.0/macos-10-universal/MonoFramework-MDK-6.12.0.206.macos10.xamarin.universal.pkg;
              sudo installer -pkg ~/MonoFramework-MDK-6.12.0.206.macos10.xamarin.universal.pkg -target /'

  # Azure DevOps hosted pool is still using an old version of Xamarin.iOS, 
  # Get Xamarin pkg URL at ~/Library/Caches/VisualStudio/17.0/TempDownload/index.html
  # so we will upgrade
  - task: CmdLine@2
    displayName: 'Provisioning Xamarin.iOS'
    inputs:
      script: 'cd ~;
              curl -OL https://github.com/codefoco/AzureDevopsTemplates/releases/download/v1.0/xamarin.ios-17.99.0.303.pkg;
              sudo installer -pkg ~/xamarin.ios-17.99.0.303.pkg  -target /'

  - task: CmdLine@2
    displayName: 'Provisioning Xamarin.Mac'
    inputs:
      script: 'cd ~;
              curl -OL https://github.com/codefoco/AzureDevopsTemplates/releases/download/v1.0/xamarin.mac-9.99.0.303.pkg;
              sudo installer -pkg ~/xamarin.mac-9.99.0.303.pkg -target /'

  - task: CmdLine@2
    displayName: 'Provisioning Xamarin.Android'
    inputs:
      script: 'cd ~;
              curl -OL https://download.visualstudio.microsoft.com/download/pr/8cbf56b1-ef0d-466f-8cfe-fae4ba8c5080/e9e853fee3169b1c5128098942f19120/xamarin.android-13.2.2.0.pkg;
              sudo installer -pkg ~/xamarin.android-13.2.2.0.pkg -target /'

  # Install GitVersion
  - script: curl -OL https://github.com/GitTools/GitVersion/releases/download/6.3.0/gitversion-osx-x64-6.3.0.tar.gz &&
            tar -xvf gitversion-osx-x64-6.3.0.tar.gz &&
            mv gitversion /usr/local/bin
    displayName: 'Install GitVersion 6.3.0'

  # Print the current version of Xamarin.iOS
  - task: CmdLine@2
    displayName: 'Show Xamarin.iOS Version'
    inputs:
      script: '/Library/Frameworks/Xamarin.iOS.framework/Versions/Current/bin/mtouch --version'

  - script: 'dotnet --info'
    displayName: 'dotnet --info'

  - script: 'dotnet workload install android ios macos tvos maccatalyst maui mobile-librarybuilder-net9 --skip-sign-check --no-cache --disable-parallel --skip-manifest-update -v d'
    displayName: 'dotnet workload install android ios macos tvos maccatalyst maui mobile-librarybuilder-net9'

  # - script: | 
  #           echo { >> 8.0.100.json
  #           echo '    "microsoft.net.sdk.macos": "14.2.8053/8.0.100",' >> 8.0.100.json
  #           echo '    "microsoft.net.sdk.ios": "17.2.8053/8.0.100",' >> 8.0.100.json
  #           echo '    "microsoft.net.sdk.maccatalyst": "17.2.8053/8.0.100",' >> 8.0.100.json
  #           echo '    "microsoft.net.sdk.maui": "8.0.21/8.0.100",' >> 8.0.100.json
  #           echo '    "microsoft.net.sdk.tvos": "17.2.8053/8.0.100",' >> 8.0.100.json
  #           echo '    "microsoft.net.sdk.android": "34.0.95/8.0.100" ' >> 8.0.100.json
  #           echo } >> 8.0.100.json
  #   displayName: 'Create 8.0.100.json'

  # - script: 'dotnet workload update --no-cache --from-rollback-file 8.0.100.json -v d'
  #   displayName: 'dotnet workload update --no-cache --from-rollback-file 8.0.100.json -v d'
    
  - script: 'dotnet --info'
    displayName: 'dotnet --info'

    
  # - script: 'dotnet workload clean' # Regression on .NET https://github.com/dotnet/runtime/issues/107233
  #   displayName: 'dotnet workload clean #1'
